// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ConseiljsRe = require("bs-conseiljs/src/ConseiljsRe.js");
var Utils$ReactHooksTemplate = require("./Utils.bs.js");

function getBlockTotalsThunk(id, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  var query = Utils$ReactHooksTemplate.getQueryForBlockTotals(id);
  return ConseiljsRe.ConseilDataClient[/* executeEntityQuery */0](match[0], match[1], match[2], "operations", query).then((function (totals) {
                  if (totals.length > 0) {
                    return Promise.resolve(Caml_option.some(Caml_array.caml_array_get(totals, 0)));
                  } else {
                    return Promise.resolve(undefined);
                  }
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

function getBlockHeadThunk(config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  return ConseiljsRe.TezosConseilClient[/* getBlockHead */2](match[0], match[2]).then((function (head) {
                  return Promise.resolve(Caml_option.some(head));
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

function getBlockThunk(id, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  return Promise.all(/* tuple */[
                  ConseiljsRe.TezosConseilClient[/* getBlock */1](match[0], match[2], id),
                  getBlockTotalsThunk(id, config)
                ]).then((function (param) {
                  var totals = param[1];
                  var blocks = param[0];
                  var blockLength = blocks.length;
                  if (blockLength !== 1) {
                    return Promise.resolve(/* tuple */[
                                "Error",
                                Utils$ReactHooksTemplate.invalidId,
                                undefined
                              ]);
                  } else if (totals !== undefined) {
                    var realBlock = Utils$ReactHooksTemplate.convertBlock(Caml_array.caml_array_get(blocks, 0), Caml_option.some(Caml_option.valFromOption(totals)), /* () */0);
                    return Promise.resolve(/* tuple */[
                                "Valid",
                                undefined,
                                Caml_option.some(realBlock)
                              ]);
                  } else {
                    var realBlock$1 = Utils$ReactHooksTemplate.convertBlock(Caml_array.caml_array_get(blocks, 0), undefined, /* () */0);
                    return Promise.resolve(/* tuple */[
                                "Valid",
                                undefined,
                                Caml_option.some(realBlock$1)
                              ]);
                  }
                })).catch((function (_err) {
                return Promise.resolve(/* tuple */[
                            "Error",
                            Utils$ReactHooksTemplate.noAvaialbel,
                            undefined
                          ]);
              }));
}

function getBlockHashThunk(level, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  return ConseiljsRe.TezosConseilClient[/* getBlockByLevel */3](match[0], match[2], level).then((function (hashs) {
                  if (hashs.length > 0) {
                    return Promise.resolve(Caml_option.some(Caml_array.caml_array_get(hashs, 0)));
                  } else {
                    return Promise.resolve(undefined);
                  }
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

function getAccountBakerThunk(id, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  var query = Utils$ReactHooksTemplate.getQueryForBakerInfo(id);
  return ConseiljsRe.ConseilDataClient[/* executeEntityQuery */0](match[0], match[1], match[2], "delegates", query).then((function (delegates) {
                  if (delegates.length > 0) {
                    return Promise.resolve(Caml_option.some(Caml_array.caml_array_get(delegates, 0)));
                  } else {
                    return Promise.resolve(undefined);
                  }
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

function getOperationThunk(id, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  var query = Utils$ReactHooksTemplate.getQueryForOperations(id);
  return ConseiljsRe.TezosConseilClient[/* getOperations */9](match[0], match[2], query).then((function (operations) {
                  if (operations.length > 0) {
                    var realOp = $$Array.map(Utils$ReactHooksTemplate.convertOperation, operations);
                    return Promise.resolve(/* tuple */[
                                "Valid",
                                undefined,
                                realOp
                              ]);
                  } else {
                    return Promise.resolve(/* tuple */[
                                "Error",
                                Utils$ReactHooksTemplate.invalidId,
                                undefined
                              ]);
                  }
                })).catch((function (_err) {
                return Promise.resolve(/* tuple */[
                            "Error",
                            Utils$ReactHooksTemplate.noAvaialbel,
                            undefined
                          ]);
              }));
}

function getAccountThunk(id, config) {
  var match = Utils$ReactHooksTemplate.getInfo(config);
  return Promise.all(/* tuple */[
                  ConseiljsRe.TezosConseilClient[/* getAccount */4](match[0], match[2], id),
                  getAccountBakerThunk(id, config)
                ]).then((function (param) {
                  var bakers = param[1];
                  var accounts = param[0];
                  var accountLength = accounts.length;
                  if (accountLength !== 1) {
                    return Promise.resolve(/* tuple */[
                                "Error",
                                Utils$ReactHooksTemplate.invalidId,
                                undefined
                              ]);
                  } else if (bakers !== undefined) {
                    var realAcc = Utils$ReactHooksTemplate.convertAccount(Caml_array.caml_array_get(accounts, 0), Caml_option.some(Caml_option.valFromOption(bakers)), /* () */0);
                    return Promise.resolve(/* tuple */[
                                "Valid",
                                undefined,
                                Caml_option.some(realAcc)
                              ]);
                  } else {
                    var realAcc$1 = Utils$ReactHooksTemplate.convertAccount(Caml_array.caml_array_get(accounts, 0), undefined, /* () */0);
                    return Promise.resolve(/* tuple */[
                                "Valid",
                                undefined,
                                Caml_option.some(realAcc$1)
                              ]);
                  }
                })).catch((function (_err) {
                return Promise.resolve(/* tuple */[
                            "Error",
                            Utils$ReactHooksTemplate.noAvaialbel,
                            undefined
                          ]);
              }));
}

exports.getBlockTotalsThunk = getBlockTotalsThunk;
exports.getBlockHeadThunk = getBlockHeadThunk;
exports.getBlockThunk = getBlockThunk;
exports.getBlockHashThunk = getBlockHashThunk;
exports.getAccountBakerThunk = getAccountBakerThunk;
exports.getOperationThunk = getOperationThunk;
exports.getAccountThunk = getAccountThunk;
/* ConseiljsRe Not a pure module */
