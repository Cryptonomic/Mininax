// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReactIntl = require("react-intl");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CopyYellowSvg = require("./images/copy-yellow.svg");
var Utils$ReactHooksTemplate = require("./Utils.bs.js");
var Themes$ReactHooksTemplate = require("./themes.bs.js");
var ContextProvider$ReactHooksTemplate = require("./ContextProvider.bs.js");

var copyYellow = CopyYellowSvg;

var mainContainer = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* :: */[
        Css.flexDirection(Css.column),
        /* :: */[
          Css.marginTop(Css.px(20)),
          /* :: */[
            Css.marginBottom(Css.px(8)),
            /* [] */0
          ]
        ]
      ]
    ]);

function rowContainer(isBottom) {
  return Css.style(/* :: */[
              Css.display(Css.flexBox),
              /* :: */[
                Css.alignItems(Css.center),
                /* :: */[
                  Css.marginBottom(isBottom ? Css.px(0) : Css.px(10)),
                  /* [] */0
                ]
              ]
            ]);
}

function labelCss(index) {
  return /* :: */[
          Css.position(Css.relative),
          /* :: */[
            Css.height(Css.px(31)),
            /* :: */[
              Css.padding4(Css.px(7), Css.px(9), Css.px(6), Css.px(9)),
              /* :: */[
                Css.fontSize(Css.px(20)),
                /* :: */[
                  Css.color(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* fieldColor */3])),
                  /* :: */[
                    Css.backgroundColor(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* fieldBgColor */1])),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ];
}

function levelLabel(index) {
  return Css.style(/* :: */[
              Css.width(Css.px(125)),
              /* :: */[
                Css.textAlign(Css.center),
                labelCss(index)
              ]
            ]);
}

function fieldLabel(isBar, index) {
  return Css.style(/* :: */[
              Css.display(Css.flexBox),
              /* :: */[
                Css.justifyContent(Css.spaceBetween),
                /* :: */[
                  Css.width(Css.px(215)),
                  /* :: */[
                    isBar ? Css.before(/* :: */[
                            Css.contentRule(""),
                            /* :: */[
                              Css.position(Css.absolute),
                              /* :: */[
                                Css.width(Css.px(8)),
                                /* :: */[
                                  Css.height(Css.px(2)),
                                  /* :: */[
                                    Css.backgroundColor(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* fieldBgColor */1])),
                                    /* :: */[
                                      Css.left(Css.px(-9)),
                                      /* :: */[
                                        Css.top(Css.px(16)),
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]) : Css.before(/* [] */0),
                    labelCss(index)
                  ]
                ]
              ]
            ]);
}

function fieldContent(index) {
  return Css.style(/* :: */[
              Css.marginLeft(Css.px(30)),
              /* :: */[
                Css.color(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* valueColor */4])),
                /* :: */[
                  Css.overflow(Css.hidden),
                  /* :: */[
                    Css.whiteSpace(Css.nowrap),
                    /* :: */[
                      Css.textOverflow(Css.ellipsis),
                      /* :: */[
                        Css.flex(/* `num */[
                              5496390,
                              1
                            ]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var levelLabelContainer = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* :: */[
        Css.width(Css.px(215)),
        /* :: */[
          Css.height(Css.px(31)),
          /* :: */[
            Css.justifyContent(Css.spaceBetween),
            /* [] */0
          ]
        ]
      ]
    ]);

function levelBtn(index) {
  return Css.style(/* :: */[
              Css.width(Css.px(31)),
              /* :: */[
                Css.height(Css.px(31)),
                /* :: */[
                  Css.fontSize(Css.px(20)),
                  /* :: */[
                    Css.border(Css.px(0), Css.none, Css.black),
                    /* :: */[
                      Css.outline(Css.px(0), Css.none, Css.transparent),
                      /* :: */[
                        Css.color(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* fieldColor */3])),
                        /* :: */[
                          Css.backgroundColor(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* fieldBgColor */1])),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function linkContent(index) {
  return Css.style(/* :: */[
              Css.marginLeft(Css.px(30)),
              /* :: */[
                Css.color(Css.hex(Caml_array.caml_array_get(Themes$ReactHooksTemplate.themes, index)[/* valueColor */4])),
                /* :: */[
                  Css.overflow(Css.hidden),
                  /* :: */[
                    Css.whiteSpace(Css.nowrap),
                    /* :: */[
                      Css.textOverflow(Css.ellipsis),
                      /* :: */[
                        Css.textDecoration(Css.underline),
                        /* :: */[
                          Css.cursor(/* pointer */-786317123),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var copyImg = Css.style(/* :: */[
      Css.cursor(/* pointer */-786317123),
      /* [] */0
    ]);

var Styles = /* module */[
  /* mainContainer */mainContainer,
  /* rowContainer */rowContainer,
  /* labelCss */labelCss,
  /* levelLabel */levelLabel,
  /* fieldLabel */fieldLabel,
  /* fieldContent */fieldContent,
  /* levelLabelContainer */levelLabelContainer,
  /* levelBtn */levelBtn,
  /* linkContent */linkContent,
  /* copyImg */copyImg
];

var dateTimeFormatOptions = {
  year: "numeric",
  month: "long",
  day: "numeric",
  hour: "numeric",
  minute: "numeric",
  timeZoneName: "short"
};

function ItemDisplay(Props) {
  var entity = Props.entity;
  var items = Props.items;
  var changeLevel = Props.changeLevel;
  var goToDetail = Props.goToDetail;
  var intl = ReactIntl.useIntl();
  var theme = React.useContext(ContextProvider$ReactHooksTemplate.themeContext);
  var fields;
  if (entity === "operation") {
    var match = Js_dict.get(items, "kind");
    var kind = match !== undefined ? match : "";
    fields = Utils$ReactHooksTemplate.getFields(entity, kind, /* () */0);
  } else {
    fields = Utils$ReactHooksTemplate.getFields(entity, undefined, /* () */0);
  }
  var fieldsLength = fields.length;
  return React.createElement("div", {
              className: mainContainer
            }, $$Array.mapi((function (index, field) {
                    var match = Js_dict.get(items, field[/* name */0]);
                    var fieldVal = match !== undefined ? match : "";
                    var match$1 = field[/* name */0];
                    var match$2 = field[/* isLink */2];
                    var exit = 0;
                    switch (match$1) {
                      case "level" : 
                          return React.createElement("div", {
                                      key: field[/* name */0],
                                      className: rowContainer(index === (fieldsLength - 1 | 0))
                                    }, React.createElement("div", {
                                          className: levelLabelContainer
                                        }, React.createElement("button", {
                                              className: levelBtn(theme),
                                              onClick: (function (param) {
                                                  return Curry._1(changeLevel, Caml_format.caml_int_of_string(fieldVal) - 1 | 0);
                                                })
                                            }, "<"), React.createElement("div", {
                                              className: levelLabel(theme)
                                            }, "Level"), React.createElement("button", {
                                              className: levelBtn(theme),
                                              onClick: (function (param) {
                                                  return Curry._1(changeLevel, Caml_format.caml_int_of_string(fieldVal) + 1 | 0);
                                                })
                                            }, ">")), React.createElement("div", {
                                          className: fieldContent(theme)
                                        }, fieldVal));
                      case "parameters" : 
                      case "script" : 
                      case "storage" : 
                          exit = 1;
                          break;
                      case "timestamp" : 
                          var match$3 = fieldVal !== "";
                          return React.createElement("div", {
                                      key: field[/* name */0],
                                      className: rowContainer(index === (fieldsLength - 1 | 0))
                                    }, React.createElement("div", {
                                          className: fieldLabel(index === 0 || index === (fieldsLength - 1 | 0), theme)
                                        }, field[/* displayName */1]), React.createElement("div", {
                                          className: fieldContent(theme)
                                        }, match$3 ? intl.formatDate(new Date(Caml_format.caml_float_of_string(fieldVal)), dateTimeFormatOptions) : fieldVal));
                      default:
                        if (match$2) {
                          return React.createElement("div", {
                                      key: field[/* name */0],
                                      className: rowContainer(index === (fieldsLength - 1 | 0))
                                    }, React.createElement("div", {
                                          className: fieldLabel(index === 0 || index === (fieldsLength - 1 | 0), theme)
                                        }, field[/* displayName */1]), React.createElement("div", {
                                          className: linkContent(theme),
                                          onClick: (function (param) {
                                              return Curry._1(goToDetail, fieldVal);
                                            })
                                        }, fieldVal));
                        } else {
                          return React.createElement("div", {
                                      key: field[/* name */0],
                                      className: rowContainer(index === (fieldsLength - 1 | 0))
                                    }, React.createElement("div", {
                                          className: fieldLabel(index === 0 || index === (fieldsLength - 1 | 0), theme)
                                        }, field[/* displayName */1]), React.createElement("div", {
                                          className: fieldContent(theme)
                                        }, fieldVal));
                        }
                    }
                    if (exit === 1) {
                      return React.createElement("div", {
                                  key: field[/* name */0],
                                  className: rowContainer(index === (fieldsLength - 1 | 0))
                                }, React.createElement("div", {
                                      className: fieldLabel(index === 0 || index === (fieldsLength - 1 | 0), theme)
                                    }, field[/* displayName */1], React.createElement("img", {
                                          className: copyImg,
                                          src: copyYellow,
                                          onClick: (function (param) {
                                              return Curry._1(Utils$ReactHooksTemplate.copyContent, fieldVal);
                                            })
                                        })), React.createElement("div", {
                                      className: fieldContent(theme)
                                    }, fieldVal));
                    }
                    
                  }), fields));
}

var make = ItemDisplay;

exports.copyYellow = copyYellow;
exports.Styles = Styles;
exports.dateTimeFormatOptions = dateTimeFormatOptions;
exports.make = make;
/* copyYellow Not a pure module */
